<!--

	This is an example of a render template, using one shader for each object.	 
	
	Based on a template by Tom Beddard ('subblue')
	
2009-02-21

	Support for 'Distored' spheres courtesy of Neon23
	Extended to support multiple shaders by Erik Wrenholt ('groovelock')
	
-->

<template name="Sun Flow Template" inherits="" >

	<substitution name="begin">
		<![CDATA[
%photons {
%	caustics 10000000 kd 64 0.5
%}

%% common settings
image {
	resolution {width} {height}
	aa 0 2
	filter blackman-harris
}

accel bih
bucket 32 spiral

%% camera
camera {
	type	pinhole
% 	type	thinlens	
	eye		{CamPosX} {CamPosY} {CamPosZ}
	target	{CamTargetX} {CamTargetY} {CamTargetZ}
	up		{CamUpX} {CamUpY} {CamUpZ}
	fov		{fov}
	aspect	{aspect}
%	fdist	{CamPosZ}
%	lensr	0.5	
}


%% light sources
light {
	type meshlight
	name "meshlight"
	emit 1 1 1
	radiance 24
	samples 32
	points 4
	3 12 3
	3 12 -3
	-3 12 3
	-3 12 -3
	triangles 2
	 2 1 0
	 1 2 3
}

%% light sources
light {
	type meshlight
	name "meshlight.2"
	emit 1 1 1
	radiance 4
	samples 32
	points 4
	4 4 12
	4 -4 12
	-4 4 12
	-4 -4 12
	triangles 2
	 0 1 2
	 3 2 1
}

%% scene background - comment out if not needed
background {
   color  { "sRGB nonlinear" {BR} {BG} {BB} }
}


%% Geometry

%% Geometry for box::sphere
object {
	shader none
	transform col 0.001 0 0 0	0 0.001 0 0 0 0 0.001 0	 0 0 0 1
	type sphere
	name "Sphere_1"
}

%% Geometry for box
object {
	shader none
	transform col 0.001 0 0 0	0 0.001 0 0	 0 0 0.001 0	0 0 0 1
	type generic-mesh
	name "Box"
	points 8
		1	1	 1
		1	0	 1
		0	0	 1
		0	1	 1
		0	1	 0
		0	0	 0
		1	0	 0
		1	1	 0

	triangles 12
	  0 3 2
	  0 2 1
	  2 3 4
	  2 4 5
	  3 0 7
	  3 7 4
	  0 1 6
	  0 6 7
	  1 2 5
	  1 5 6
	  5 4 7
	  5 7 6
	normals none
	uvs none
}
		]]>
	</substitution>
	
	<substitution name="end">
		<![CDATA[

		]]>
	</substitution>

<!-- ===========================================================================
Normal 'box'.  Use diffuse shader
-->

<!-- box::shiny -->
	<substitution name="box" type="shiny">
		<![CDATA[
shader {
	name "shader{uid}"
	type shiny
	diff { "sRGB nonlinear" {r} {g} {b} }
	refl 0.5
}

instance {
	name "{uid}"
	geometry "Box"
	transform col {matrix}
	shader "shader{uid}"
}
		]]>
	</substitution>

<!-- box::diffuse -->
	<substitution name="box" type="diffuse">
		<![CDATA[
shader {
	name "shader{uid}"
	type diffuse
	diff { "sRGB nonlinear" {r} {g} {b} }
}

instance {
	name "{uid}"
	geometry "Box"
	transform col {matrix}
	shader "shader{uid}"
}
		]]>
	</substitution>

<!-- box::AO -->
	<substitution name="box" type="ao">
		<![CDATA[
shader {
	name "shader{uid}"
	type amb-occ
	bright { "sRGB nonlinear" {r} {g} {b} }
	dark { "sRGB nonlinear"   0 0 0 }
	samples  32
	dist     6
}

instance {
	name "{uid}"
	geometry "Box"
	transform col {matrix}
	shader "shader{uid}"
}
		]]>
	</substitution>

<!-- box::mirror -->
	<substitution name="box" type="mirror">
		<![CDATA[
shader {
	name "shader{uid}"
	type mirror
	refl { "sRGB nonlinear" {r} {g} {b} }
}

instance {
	name "{uid}"
	geometry "Box"
	transform col {matrix}
	shader "shader{uid}"
}
		]]>
	</substitution>

<!-- box::constant -->
	<substitution name="box" type="constant">
		<![CDATA[
shader {
	name "shader{uid}"
	type constant
	color { "sRGB nonlinear" {r} {g} {b} }
}

instance {
	name "{uid}"
	geometry "Box"
	transform col {matrix}
	shader "shader{uid}"
}
		]]>
	</substitution>

<!-- box::ward -->
	<substitution name="box" type="ward">
		<![CDATA[
shader {
	name "shader{uid}"
	type ward
	diff { "sRGB nonlinear" {r} {g} {b} }
	spec { "sRGB nonlinear" 1 1 1 }
	rough 0.07 0.1
	samples 8
}

instance {
	name "{uid}"
	geometry "Box"
	transform col {matrix}
	shader "shader{uid}"
}
		]]>
	</substitution>

<!-- box::glass -->
	<substitution name="box" type="glass">
		<![CDATA[
shader {
	name "shader{uid}"
	type glass
	eta 1.6
	color { "sRGB nonlinear" {r} {g} {b} }
	absorbtion.distance 5.0
	absorbtion.color { "sRGB nonlinear" 1.0 1.0 1.0 }
}

instance {
	name "{uid}"
	geometry "Box"
	transform col {matrix}
	shader "shader{uid}"
}
		]]>
	</substitution>

<!-- box::phong -->
	<substitution name="box" type="phong">
		<![CDATA[
shader {
	name "shader{uid}"
	type phong
	diff { "sRGB nonlinear" {r} {g} {b} }
	spec { "sRGB nonlinear" 1 1 1 } 100
	samples 4
}

instance {
	name "{uid}"
	geometry "Box"
	transform col {matrix}
	shader "shader{uid}"
}
		]]>
	</substitution>

	<substitution name="box">
		<![CDATA[
shader {
	name "shader{uid}"
	type diffuse
	diff { "sRGB nonlinear" {r} {g} {b} }
}

instance {
	name "{uid}"
	geometry "Box"
	transform col {matrix}
	shader "shader{uid}"
}
		]]>
	</substitution>



<!-- ===========================================================================
Normal 'box::sphere'.  Use diffuse shader
-->
	
<!-- box::sphereShiny -->
	<substitution name="box" type="sphereshiny">
		<![CDATA[
shader {
	name "shader{uid}"
	type shiny
	diff { "sRGB nonlinear" {r} {g} {b} }
	refl 0.5
}

instance {
	name "{uid}"
	geometry "Sphere_1"
	transform col {matrix}
	shader "shader{uid}"
}
		]]>
	</substitution>

<!-- box::sphereDiffuse -->
	<substitution name="box" type="spherediffuse">
		<![CDATA[
shader {
	name "shader{uid}"
	type diffuse
	diff { "sRGB nonlinear" {r} {g} {b} }
}

instance {
	name "{uid}"
	geometry "Sphere_1"
	transform col {matrix}
	shader "shader{uid}"
}
		]]>
	</substitution>

<!-- box::sphereAO -->
	<substitution name="box" type="sphereao">
		<![CDATA[
shader {
	name "shader{uid}"
	type amb-occ
	bright { "sRGB nonlinear" {r} {g} {b} }
	dark { "sRGB nonlinear"   0 0 0 }
	samples  32
	dist     6
}

instance {
	name "{uid}"
	geometry "Sphere_1"
	transform col {matrix}
	shader "shader{uid}"
}
		]]>
	</substitution>

<!-- box::sphereMirror -->
	<substitution name="box" type="spheremirror">
		<![CDATA[
shader {
	name "shader{uid}"
	type mirror
	refl { "sRGB nonlinear" {r} {g} {b} }
}

instance {
	name "{uid}"
	geometry "Sphere_1"
	transform col {matrix}
	shader "shader{uid}"
}
		]]>
	</substitution>

<!-- box::sphereConstant -->
	<substitution name="box" type="sphereconstant">
		<![CDATA[
shader {
	name "shader{uid}"
	type constant
	color { "sRGB nonlinear" {r} {g} {b} }
}

instance {
	name "{uid}"
	geometry "Sphere_1"
	transform col {matrix}
	shader "shader{uid}"
}
		]]>
	</substitution>

<!-- box::sphereWard -->
	<substitution name="box" type="sphereward">
		<![CDATA[
shader {
	name "shader{uid}"
	type ward
	diff { "sRGB nonlinear" {r} {g} {b} }
	spec { "sRGB nonlinear" 1 1 1 }
	rough 0.07 0.1
	samples 8
}

instance {
	name "{uid}"
	geometry "Sphere_1"
	transform col {matrix}
	shader "shader{uid}"
}
		]]>
	</substitution>

<!-- box::sphereGlass -->
	<substitution name="box" type="sphereglass">
		<![CDATA[
shader {
	name "shader{uid}"
	type glass
	eta 1.6
	color { "sRGB nonlinear" {r} {g} {b} }
	absorbtion.distance 5.0
	absorbtion.color { "sRGB nonlinear" 1.0 1.0 1.0 }
}

instance {
	name "{uid}"
	geometry "Sphere_1"
	transform col {matrix}
	shader "shader{uid}"
}
		]]>
	</substitution>

<!-- box::spherePhong -->
	<substitution name="box" type="spherephong">
		<![CDATA[
shader {
	name "shader{uid}"
	type phong
	diff { "sRGB nonlinear" {r} {g} {b} }
	spec { "sRGB nonlinear" 1 1 1 } 100
	samples 4
}

instance {
	name "{uid}"
	geometry "Sphere_1"
	transform col {matrix}
	shader "shader{uid}"
}
		]]>
	</substitution>


	<substitution name="box" type="sphere">
		<![CDATA[
shader {
	name "shader{uid}"
	type diffuse
	diff { "sRGB nonlinear" {r} {g} {b} }
}

instance {
	name "{uid}"
	geometry "Sphere_1"
	transform col {matrix}
	shader "shader{uid}"
}
		]]>
	</substitution>

<!-- ===========================================================================
Normal 'sphere'.  Use diffuse shader
-->

<!-- box::shiny -->
	<substitution name="sphere" type="shiny">
		<![CDATA[
shader {
	name "shader{uid}"
	type shiny
	diff { "sRGB nonlinear" {r} {g} {b} }
	refl 0.5
}

object {
	shader "shader{uid}"
	type sphere
	c {cx} {cy} {cz}
	r {rad}
}
		]]>
	</substitution>

<!-- box::diffuse -->
	<substitution name="sphere" type="diffuse">
		<![CDATA[
shader {
	name "shader{uid}"
	type diffuse
	diff { "sRGB nonlinear" {r} {g} {b} }
}

object {
	shader "shader{uid}"
	type sphere
	c {cx} {cy} {cz}
	r {rad}
}
		]]>
	</substitution>

<!-- box::AO -->
	<substitution name="sphere" type="ao">
		<![CDATA[
shader {
	name "shader{uid}"
	type amb-occ
	bright { "sRGB nonlinear" {r} {g} {b} }
	dark { "sRGB nonlinear"   0 0 0 }
	samples  32
	dist     6
}

object {
	shader "shader{uid}"
	type sphere
	c {cx} {cy} {cz}
	r {rad}
}
		]]>
	</substitution>

<!-- box::mirror -->
	<substitution name="sphere" type="mirror">
		<![CDATA[
shader {
	name "shader{uid}"
	type mirror
	refl { "sRGB nonlinear" {r} {g} {b} }
}

object {
	shader "shader{uid}"
	type sphere
	c {cx} {cy} {cz}
	r {rad}
}
		]]>
	</substitution>

<!-- box::constant -->
	<substitution name="sphere" type="constant">
		<![CDATA[
shader {
	name "shader{uid}"
	type constant
	color { "sRGB nonlinear" {r} {g} {b} }
}

object {
	shader "shader{uid}"
	type sphere
	c {cx} {cy} {cz}
	r {rad}
}
		]]>
	</substitution>

<!-- box::ward -->
	<substitution name="sphere" type="ward">
		<![CDATA[
shader {
	name "shader{uid}"
	type ward
	diff { "sRGB nonlinear" {r} {g} {b} }
	spec { "sRGB nonlinear" 1 1 1 }
	rough 0.07 0.1
	samples 8
}

object {
	shader "shader{uid}"
	type sphere
	c {cx} {cy} {cz}
	r {rad}
}
		]]>
	</substitution>

<!-- box::glass -->
	<substitution name="sphere" type="glass">
		<![CDATA[
shader {
	name "shader{uid}"
	type glass
	eta 1.6
	color { "sRGB nonlinear" {r} {g} {b} }
	absorbtion.distance 5.0
	absorbtion.color { "sRGB nonlinear" 1.0 1.0 1.0 }
}

object {
	shader "shader{uid}"
	type sphere
	c {cx} {cy} {cz}
	r {rad}
}
		]]>
	</substitution>

<!-- box::phong -->
	<substitution name="sphere" type="phong">
		<![CDATA[
shader {
	name "shader{uid}"
	type phong
	diff { "sRGB nonlinear" {r} {g} {b} }
	spec { "sRGB nonlinear" 1 1 1 } 100
	samples 4
}

object {
	shader "shader{uid}"
	type sphere
	c {cx} {cy} {cz}
	r {rad}
}
		]]>
	</substitution>

	<substitution name="sphere" type="light">
		<![CDATA[
light {
	type spherical
	color { "sRGB nonlinear" {r} {g} {b} }
	radiance 20.0
	center {cx} {cy} {cz}
	radius {rad}
	samples 16
}
		]]>
	</substitution>


	<substitution name="sphere">
		<![CDATA[
shader {
	name "shader{uid}"
	type diffuse
	diff { "sRGB nonlinear" {r} {g} {b} }
}

object {
	shader "shader{uid}"
	type sphere
	c {cx} {cy} {cz}
	r {rad}
}
		]]>
	</substitution>
</template>